"""TODO: change this as MNIST"""
import tensorflow as tf

### mask_effective_attack is to be implemented
class Drebin(object):
  def __init__(self, precision=tf.float32):
      self.precision = precision

  def _encoder(self, x_input , keep_prob=0.5,is_train=False, mask_effective_attack=False):

    # self.x_input = tf.reshape(self.x_input, [-1, 545334])

    # first fully connected layer
    W_fc1 = self._weight_variable([545334, 200], name='w1')
    b_fc1 = self._bias_variable([200], name='b1')
    self.x3 = tf.nn.relu(tf.matmul(x_input, W_fc1) + b_fc1)

    # second fully connected layer
    W_fc2 = self._weight_variable([200, 200], name='w2')
    b_fc2 = self._bias_variable([200], name='b2')
    self.x4 = tf.nn.relu(tf.matmul(self.x3, W_fc2) + b_fc2)

    # third fully connected layer
    W_fc3 = self._weight_variable([200, 200], name='w3')
    b_fc3 = self._bias_variable([200], name='b3')
    self.x5 = tf.nn.relu(tf.matmul(self.x4, W_fc3) + b_fc3)


    # output layer
    W_fc4 = self._weight_variable([200, 2], name='w4')
    b_fc4 = self._bias_variable([2], name='b4')
    logit_bias = tf.matmul(self.x5, W_fc4) + b_fc4

    return logit_bias


   

    

        


  def reduce_sum_det(self, x):
      v = tf.reshape(x, [1, -1])
      return tf.reshape(tf.matmul(v, tf.ones_like(v, dtype=self.precision), transpose_b=True), [])

  def _weight_variable(self, shape, name):
      
    w = tf.get_variable(name, dtype=self.precision, initializer=tf.truncated_normal(shape, stddev=0.1, dtype=self.precision))  #TODO: init is a constant
    return w

  def _bias_variable(self, out_dim, name):
      
    b = tf.get_variable(name, dtype=self.precision,
                        initializer= tf.constant(0.1, shape = [out_dim[0]], dtype=self.precision))
    return b

  def _decay(self):
    """L2 weight decay loss."""
    costs = []
    for var in tf.trainable_variables():
      if var.op.name.find('DW') > 0:
        costs.append(tf.nn.l2_loss(var))
    return tf.add_n(costs)
